(window.webpackJsonp=window.webpackJsonp||[]).push([[265],{403:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return p})),a.d(t,"rightToc",(function(){return b})),a.d(t,"default",(function(){return s}));var n=a(1),r=a(9),l=(a(0),a(469)),i={id:"10-nodejs",title:"Node.js"},p={id:"10-nodejs",title:"Node.js",description:"- Node.js allows us to run JavaScript in different environments and run different tasks",source:"@site/../docs/10-nodejs.md",permalink:"/node_comit/docs/10-nodejs",editUrl:"https://github.com/prma85/node_comit/edit/master/../docs/10-nodejs.md",lastUpdatedBy:"prma85",lastUpdatedAt:1583632923,sidebar:"course",previous:{title:"Browser API",permalink:"/node_comit/docs/09-browserapi"},next:{title:"Building a site using Node.js and Express",permalink:"/node_comit/docs/11-express"}},b=[{value:"NPM",id:"npm",children:[{value:"Start a new NPM project",id:"start-a-new-npm-project",children:[]},{value:"NPM scripts",id:"npm-scripts",children:[]},{value:"Install NPM module",id:"install-npm-module",children:[]}]},{value:"Modules",id:"modules",children:[{value:"Using modules",id:"using-modules",children:[]},{value:"Create your first module",id:"create-your-first-module",children:[]},{value:"How do Node.js modules work",id:"how-do-nodejs-modules-work",children:[]}]},{value:"Arrow Functions",id:"arrow-functions",children:[]},{value:"Web Server",id:"web-server",children:[]},{value:"Express",id:"express",children:[{value:"Create a web server using Express",id:"create-a-web-server-using-express",children:[]},{value:"Using GET routes",id:"using-get-routes",children:[]},{value:"Response handling",id:"response-handling",children:[]},{value:"Express Router",id:"express-router",children:[]},{value:"Status and error handling",id:"status-and-error-handling",children:[]},{value:"Middleware",id:"middleware",children:[]},{value:"Static Content",id:"static-content",children:[]},{value:"Templates",id:"templates",children:[]}]},{value:"Sending/getting data from the client to the server",id:"sendinggetting-data-from-the-client-to-the-server",children:[]},{value:"We&#39;re CRAZY about JavaScript, Node.js and Express.js",id:"were-crazy-about-javascript-nodejs-and-expressjs",children:[]},{value:"Assets / Sources",id:"assets--sources",children:[]}],c={rightToc:b};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Node.js allows us to run JavaScript in different environments and run different tasks"),Object(l.b)("li",{parentName:"ul"},"Using Node we can:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Run a simple script (like our exercises)"),Object(l.b)("li",{parentName:"ul"},"Bundle our front-end code and assets using different cool modules"),Object(l.b)("li",{parentName:"ul"},"Run a web server"),Object(l.b)("li",{parentName:"ul"},"Create back-end apps using different databases"))),Object(l.b)("li",{parentName:"ul"},"Over this course section we'll focus on using Node.js to create a web server and create a back-end app"),Object(l.b)("li",{parentName:"ul"},"We'll create dynamic documents"),Object(l.b)("li",{parentName:"ul"},"When we installed Node.js we also installed other program called NPM")),Object(l.b)("h2",{id:"npm"},"NPM"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},'NPM used to stand for Node Package Manager but nowadays it\'s just known as "NPM"')),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Thanks to NPM we can install many different Node.js modules and import them into our projects")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This way we reuse code and we can contribute to other modules too")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"NPM is one of the largest modules repository")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Visit ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.npmjs.com"}),"NPM site")," to learn more about it")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also learn more reading ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://blog.npmjs.org"}),"NPM blog"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also, they have the best mascot ever.. NPM wombat!!"),Object(l.b)("p",{parentName:"li"},Object(l.b)("img",Object(n.a)({parentName:"p"},{src:"../resources/images/node/wombat.png",alt:"Wombat"}))))),Object(l.b)("h3",{id:"start-a-new-npm-project"},"Start a new NPM project"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To start a new project first we need to create a new folder and change directory to go inside of it")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"You can do this in unix like systems"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"mkdir learning-node\ncd learning-node\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Once we're in the right folder we run the NPM command ",Object(l.b)("inlineCode",{parentName:"p"},"init"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This command asks a lot of questions to configure our project")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can ignore them and just press enter")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://docs.npmjs.com/cli/init"}),"NPM init doc")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm init\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Or we can generate it without having to answer the questions"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm init -y\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This script creates a new package.json file that allows us to configure our project")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Just looking at the file extension we can figure out that we'll use JSON for our npm configuration file"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'{\n  "name": "learning-node",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "author": "",\n  "license": "ISC"\n}\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"NPM init uses our answers to create the configuration file based on our answers")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Once we have the file we can update any value on it"))),Object(l.b)("h3",{id:"npm-scripts"},"NPM scripts"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In the ",Object(l.b)("strong",{parentName:"p"},"package.json")," file we can find a ",Object(l.b)("strong",{parentName:"p"},"scripts")," key")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"By default we have a test script")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can create our own scripts")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Add a ",Object(l.b)("strong",{parentName:"p"},"start")," script"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'"scripts": {\n  "test": "echo \\"Error: no test specified\\" && exit 1",\n  "start": "node index.js"\n},\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now we can run this command from our command line"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm start\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"At this point we get an error"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"Error: Cannot find module 'index.js'\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We get this error as we try to execute index.js script and node can't find it")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As we are calling ",Object(l.b)("inlineCode",{parentName:"p"},"node index.js")," we need to create this new file at the same package.json or root level")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Update the start script definition if you need to move index.js to a different project/folder structure")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Create index.js and add the following code"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"index.js")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'console.log("Welcome to JavaScript and Node.js server side");\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Run the npm start command again"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm start\n\nWelcome to JavaScript and Node.js server side\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now we know how to create, configure and run scripts using NPM and Node"))),Object(l.b)("h3",{id:"install-npm-module"},"Install NPM module"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using NPM we can install modules and use them on our projects")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Run ",Object(l.b)("strong",{parentName:"p"},"npm install")," and the module name to install the given module")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"You can check and search for modules on the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.npmjs.com"}),"NPM site"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this case we're going to install ",Object(l.b)("strong",{parentName:"p"},"Express")," which is a popular module to create a web server")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"A web server is the magic that gives you a web page when you ask the internet for one :)"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If you are interested in knowing more, ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_web_server"}),"here")," is a good place to start"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Check out ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.npmjs.com/package/express"}),"express npm page"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also, take a look at ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"http://expressjs.com"}),"express site and doc")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install express\n")),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"package.json")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'"dependencies": {\n  "express": "^4.16.3"\n}\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Running NPM install creates a ",Object(l.b)("strong",{parentName:"p"},"node_modules")," folder")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Inside ",Object(l.b)("strong",{parentName:"p"},"node_modules")," we find all the installed modules for a given project")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This folder can grow in size as we can have many installed modules or dependencies")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To avoid having issues we can ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://git-scm.com/docs/gitignore"}),".gitignore")," this folder")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So if we're not sharing the node_modules folder with other team members... do we need to remember the list of installed modules?")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"By default now NPM installs the modules and add them to our package.json dependencies")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Delete the node_modules folder")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Run the npm install command but without the module name"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"NPM reads our list of dependencies, downloads and install all the modules for us")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this case we have only Express as dependency")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In many cases we need dependencies that are only for development purposes like for example a library to run our tests, build our bundle or deploy our project")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"NPM supports devDependencies that are modules that we don't deploy on our server")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To install a devDependencies we run npm install and add --save-dev as command parameter")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"By default npm install now runs ",Object(l.b)("inlineCode",{parentName:"p"},"npm install --save")," to save the module as dependency")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Lets install a dev dependency called ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/mishoo/UglifyJS2"}),"UglifyJS")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install uglify-js --save-dev\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Open package.json to see the installed dependecy"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'"devDependencies": {\n  "uglify-js": "^3.3.25"\n}\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now we have express installed as dependency and uglify.js as dev dependency")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Delete the node_modules and run npm install again to make sure that npm install both dependencies")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Lets configure uglify.js to run as script")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Add the following script to your package.json file"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'"uglify": "uglifyjs index.js --output script.js"\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Open index.js and replace the console.log() for the following code"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var firstname = "Ciro";\nvar lastname = "Rodriguez";\nvar age = 20;\n\nconsole.log(firstname);\nconsole.log(lastname);\nconsole.log(age);\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now run the following npm command"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm run uglify\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"When running this command you'll see the following output: ",Object(l.b)("inlineCode",{parentName:"p"},"> uglifyjs index.js --output script.js"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"NPM has configured some scripts names as shortcuts like start and test")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"When we need to run our own scripts we need to use ",Object(l.b)("inlineCode",{parentName:"p"},"npm run scriptname"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"NPM can execute the code configured on this script as uglify.js is installed in the node_modules folder")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"NPM can access installed node_modules modules")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Open the generated script.js file"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"script.js")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var firstname = "Ciro";\nvar lastname = "Rodriguez";\nvar age = 20;\nconstole.log(firstname);\nconstole.log(lastname);\nconstole.log(age);\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Uglify.js does a lot of things to bundle our code")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Uglify removes all the spaces as we need to create a smaller file so it takes less time to download")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This file is prepared to be deployed and not to read")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The index.js file still has our code and that it's more readable")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We don't need uglify.js as dependency as we prepare our files before we deploy them")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This is why we can install it as devDependency")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"NPM can also uninstall packages running the uninstall command")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"First we'll install a new module so we can then test this new command")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Install ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/expressjs/morgan"}),"Morgan.js")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install morgan\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Check the package.json file"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'"dependencies": {\n  "express": "^4.16.3",\n  "morgan": "^1.9.0"\n},\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now run npm uninstall with the module name that you want to remove"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm uninstall morgan\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"After running npm uninstall your package.json should only have express as dependency"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'"dependencies": {\n  "express": "^4.16.3"\n},\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"All this modules has been installed as local dependencies")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"NPM can also install modules as global so we can run them as programs from anywhere")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To install a module as global we also run npm install but we add the ",Object(l.b)("strong",{parentName:"p"},"-g")," parameter")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"For example when we installed ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/indexzero/http-server"}),"http-server")," we installed it as global so we can use it from any folder"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install http-server -g\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As we're going to create a web server and we already have express installed we could start coding it")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Express is a really flexible module but we want to add some structure to our project")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Install ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/expressjs/generator"}),"express-generator")," as a global module"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install express-generator -g\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To make sure that the module has been installed run the following command:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"express --help\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"If you get an error running the previous command try closing and opening your terminal again")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Sometimes you need to restart your terminal so the terminal notice that there's other modules installed (not so common but it might happen)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now you should get the following output"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"Usage: express [options] [dir]\n\nOptions:\n\n  -h, --help           output usage information\n      --version        output the version number\n  -e, --ejs            add ejs engine support\n      --pug            add pug engine support\n      --hbs            add handlebars engine support\n  -H, --hogan          add hogan.js engine support\n  -v, --view <engine>  add view <engine> support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)\n  -c, --css <engine>   add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)\n      --git            add .gitignore\n  -f, --force          force on non-empty directory\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As we're learning express lets add our own structure and uninstall this module")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can add it later if we really need it"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm uninstall express-generator -g\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As you can see NPM is a great package module and will help us install and uninstall regular or dev dependencies"))),Object(l.b)("h2",{id:"modules"},"Modules"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"A module is just a way to encapsulate our code in a single code unit")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This means that we'll organize our code by functionality and create our own modules too")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Node.js by default has a module loader that we can use")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can create a single file and use it as module in our project")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The ",Object(l.b)("strong",{parentName:"p"},"require")," function accepts a string as parameter with the name of the module that we want to get")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Require will look into the node_modules folder to see if we have that module installed"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const module = require("modulename");\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can also use relative paths to load our modules"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"/\n|- index.js\n|- my-module.js\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"For example if we have the index.js file and my-module.js we can load the my-module from the index one in the following way"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const module = require("./my-module");\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As both files are siblings we can use ",Object(l.b)("inlineCode",{parentName:"p"},"./")," to let node node know that the my-module module is at the same level")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also, you can see that we're not using ",Object(l.b)("inlineCode",{parentName:"p"},".js")," as my module extension")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"By default require will look for a JavaScript file"))),Object(l.b)("h3",{id:"using-modules"},"Using modules"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As we have express installed as module we can require it from our project")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Delete all the ",Object(l.b)("inlineCode",{parentName:"p"},"index.js")," content and add the following one"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const express = require("express");\nconsole.log(express);\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now run npm start"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm start\n")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"{ [Function: createApplication]\n  application:\n  { init: [Function: init],\n    defaultConfiguration: [Function: defaultConfiguration],\n    lazyrouter: [Function: lazyrouter],\n    handle: [Function: handle],\n    use: [Function: use],\n    route: [Function: route],\n    engine: [Function: engine],\n    param: [Function: param],\n    set: [Function: set],\n    path: [Function: path],\n    enabled: [Function: enabled],\n    disabled: [Function: disabled],\n    enable: [Function: enable],\n    disable: [Function: disable],\n    acl: [Function],\n    bind: [Function],\n    checkout: [Function],\n    connect: [Function],\n    copy: [Function],\n    delete: [Function],\n    get: [Function],\n    head: [Function],\n    link: [Function],\n    lock: [Function],\n    'm-search': [Function],\n    merge: [Function],\n    mkactivity: [Function],\n    mkcalendar: [Function],\n    mkcol: [Function],\n    move: [Function],\n    notify: [Function],\n    options: [Function],\n    patch: [Function],\n    post: [Function],\n    propfind: [Function],\n    proppatch: [Function],\n    purge: [Function],\n    put: [Function],\n    rebind: [Function],\n    report: [Function],\n    search: [Function],\n    subscribe: [Function],\n    trace: [Function],\n    unbind: [Function],\n    unlink: [Function],\n    unlock: [Function],\n    unsubscribe: [Function],\n    all: [Function: all],\n    del: [Function],\n    render: [Function: render],\n    listen: [Function: listen] },\n  request:\n  IncomingMessage {\n    header: [Function: header],\n    get: [Function: header],\n    accepts: [Function],\n    acceptsEncodings: [Function],\n    acceptsEncoding: [Function],\n    acceptsCharsets: [Function],\n    acceptsCharset: [Function],\n    acceptsLanguages: [Function],\n    acceptsLanguage: [Function],\n    range: [Function: range],\n    param: [Function: param],\n    is: [Function: is],\n    protocol: [Getter],\n    secure: [Getter],\n    ip: [Getter],\n    ips: [Getter],\n    subdomains: [Getter],\n    path: [Getter],\n    hostname: [Getter],\n    host: [Getter],\n    fresh: [Getter],\n    stale: [Getter],\n    xhr: [Getter] },\n  response:\n  ServerResponse {\n    status: [Function: status],\n    links: [Function],\n    send: [Function: send],\n    json: [Function: json],\n    jsonp: [Function: jsonp],\n    sendStatus: [Function: sendStatus],\n    sendFile: [Function: sendFile],\n    sendfile: [Function],\n    download: [Function: download],\n    type: [Function: contentType],\n    contentType: [Function: contentType],\n    format: [Function],\n    attachment: [Function: attachment],\n    append: [Function: append],\n    header: [Function: header],\n    set: [Function: header],\n    get: [Function],\n    clearCookie: [Function: clearCookie],\n    cookie: [Function],\n    location: [Function: location],\n    redirect: [Function: redirect],\n    vary: [Function],\n    render: [Function: render] },\n  Route: [Function: Route],\n  Router:\n  { [Function]\n    param: [Function: param],\n    handle: [Function: handle],\n    process_params: [Function: process_params],\n    use: [Function: use],\n    route: [Function: route],\n    acl: [Function],\n    bind: [Function],\n    checkout: [Function],\n    connect: [Function],\n    copy: [Function],\n    delete: [Function],\n    get: [Function],\n    head: [Function],\n    link: [Function],\n    lock: [Function],\n    'm-search': [Function],\n    merge: [Function],\n    mkactivity: [Function],\n    mkcalendar: [Function],\n    mkcol: [Function],\n    move: [Function],\n    notify: [Function],\n    options: [Function],\n    patch: [Function],\n    post: [Function],\n    propfind: [Function],\n    proppatch: [Function],\n    purge: [Function],\n    put: [Function],\n    rebind: [Function],\n    report: [Function],\n    search: [Function],\n    subscribe: [Function],\n    trace: [Function],\n    unbind: [Function],\n    unlink: [Function],\n    unlock: [Function],\n    unsubscribe: [Function],\n    all: [Function] },\n  json: [Function: json],\n  query: [Function: query],\n  static:\n  { [Function: serveStatic]\n    mime:\n      Mime {\n        types: [Object],\n        extensions: [Object],\n        default_type: 'application/octet-stream',\n        Mime: [Function: Mime],\n        charsets: [Object] } },\n  urlencoded: [Function: urlencoded] }\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We get a big object definition as output")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"By using ",Object(l.b)("inlineCode",{parentName:"p"},"require('express')")," we tell node to get express code")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this case we can assign the value that we get back from the require call ",Object(l.b)("inlineCode",{parentName:"p"},"const express = require('express');"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Node.js also has it own modules")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Take a look at ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://nodejs.org/api"}),"Node.js module doc")))),Object(l.b)("h3",{id:"create-your-first-module"},"Create your first module"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can learn more about modules by creating our own one")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Create a ",Object(l.b)("inlineCode",{parentName:"p"},"math.js")," file and add the following code"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"math.js")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const revenew = 50;\n\nconst priceCalculation = function(price) {\n  return price + revenew;\n};\n\nmodule.exports = priceCalculation;\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Comment the express require call")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Require math module and use it from index.js"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"index.js")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"// const express = require('express')\n// console.log(express)\n\nconst getPrice = require(\"./math\");\nconst price = getPrice(200);\n\nconsole.log(price);\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Run the project"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm start\n\n250\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we created a module called ",Object(l.b)("inlineCode",{parentName:"p"},"math"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The math module exports a ",Object(l.b)("inlineCode",{parentName:"p"},"priceCalculation")," function that we can use")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This function accepts a number parameter and will return a value with the final price")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Node.js uses ",Object(l.b)("inlineCode",{parentName:"p"},"module.exports")," that represents an object that we can export")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now that we have our ",Object(l.b)("inlineCode",{parentName:"p"},"math")," module we can ",Object(l.b)("inlineCode",{parentName:"p"},"require")," it from ",Object(l.b)("inlineCode",{parentName:"p"},"index.js"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As the math module it's not installed in the node_module we use the relative path to import it ",Object(l.b)("inlineCode",{parentName:"p"},"require('./math')"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We defined a variable getPrice and assign what math module is exporting")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this case it's just a function but it could be an object or any other value")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Then we can use the getPrice function with any numeric value to get the final price")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"By using this math module we calculate the final price without knowing the logic behind it")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"If we need to change the way that we calculate a price we just update the math module an it will work from anywhere it's being called")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In case we need or want to share this module between project we can just publish it on the NPM repository")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"NPM has public and private repositories")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also we can link NPM modules while we develop our projects if we have them as external dependencies"))),Object(l.b)("h3",{id:"how-do-nodejs-modules-work"},"How do Node.js modules work"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Node.js uses a ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://medium.com/@tkssharma/javascript-module-pattern-b4b5012ada9f"}),"module pattern")," to export code")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Once we export our code Node.js will enclose it inside a function so the module scope is private")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Module variables and rest of the code will be private")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We only can access and use what it has been exported using ",Object(l.b)("inlineCode",{parentName:"p"},"module.exports"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also, we can export more code using just ",Object(l.b)("inlineCode",{parentName:"p"},"exports")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"exports = getPrice;\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Read and learn more about ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://nodejs.org/api/modules.html"}),"Node.js modules")))),Object(l.b)("h4",{id:"practice"},"Practice"),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_1"}),"Exercise 1")),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_2"}),"Exercise 2")),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_3"}),"Exercise 3")),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_4"}),"Exercise 4")),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_5"}),"Exercise 5")),Object(l.b)("h2",{id:"arrow-functions"},"Arrow Functions"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Node.js uses arrow functions for its callbacks and you can see many examples in their documentation")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Arrow functions are just JavaScript functions that we write in a different way")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We won't use the function reserved word")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Arrow function definition"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"// Regular function\nfunction() {}\n\n// Arrow function\n() => {}\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can assign them to variables in the same way that we used to"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const myFunction = function() {\n  console.log("my function call");\n};\n\nconst myES6Function = () => {\n  console.log("my function");\n};\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Then we can call them in the same way we used to:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const myFunction = function() {\n  console.log("my function call");\n};\n\nconst myES6Function = () => {\n  console.log("my function");\n};\n\nmyFunction();\nmyES6Function();\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we see how similar functions and arrow functions are")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Arrow functions are part of the ES6 definition and they are simple to write")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://caniuse.com/#search=arrow%20functions"}),"almost use them on any Browser")," too"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const myFunction = function(parameter) {\n  console.log("parameter: ", parameter);\n};\n\nconst myES6Function = parameter => {\n  console.log("parameter: ", parameter);\n};\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Passing parameters works the same way too")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The only difference is that if we only pass one parameter we can remove the parentheses"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const myFunction = function(parameter) {\n  console.log("parameter: ", parameter);\n};\n\nconst myES6Function = parameter => {\n  console.log("parameter: ", parameter);\n};\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"They are really usefull when we use them as callbacks:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const students = ["tom", "peter", "maria", "claire"];\n\nstudents.forEach(function(student) {\n  console.log(student);\n});\n\nstudents.forEach(student => {\n  console.log(student);\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In both cases the functions are working as callbacks but arrow functions looks much simpler")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Arrow functions change the way that we can return values from it")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using arrow functions will return the value after the => symbol"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'function getMessage() {\n  return "hi, this is a message";\n}\n\nconst getMessageArrowFunction = () => "hi, this is a message";\nconst message = getMessageArrowFunction();\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As ",Object(l.b)("inlineCode",{parentName:"p"},"{ }")," in arrow functions are used to limit the function body we need to find a different way in case we need them to return an object")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can use parentheses and curly brackets"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'function getUser() {\n  const user = {\n    name: "Maria",\n    age: 26\n  };\n\n  return user;\n}\n\nconst getUserArrowFunction = () => ({\n  name: "Maria",\n  age: 26\n});\n\nconst user = getUserArrowFunction();\nconsole.log(user.name);\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Arrow functions do not have their own this value")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This means that the ",Object(l.b)("inlineCode",{parentName:"p"},"this")," inside the function it's going to work in a different way")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Lexical Scoping just means that it uses this from the code that contains the Arrow Function")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"You can see ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://hackernoon.com/javascript-es6-arrow-functions-and-lexical-this-f2a3e2a5e8c4"}),"great examples"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Read the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"}),"MDN Arrow functions")," doc to learn more about Arrow Functions")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/"}),"ES6 in depth arrow functions"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.youtube.com/watch?v=mrYMzpbFz18"}),"The Coding Train - ES6 Arrow Function - YouTube")))),Object(l.b)("h4",{id:"practice-1"},"Practice"),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_6"}),"Exercise 6")),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_7"}),"Exercise 7")),Object(l.b)("h2",{id:"web-server"},"Web Server"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Node.js has a build in ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://nodejs.org/dist/latest-v8.x/docs/api/http.html"}),"HTTP")," module")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using the HTTP module we can create a Node.js Web Server")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This web server will listen for ",Object(l.b)("inlineCode",{parentName:"p"},"HTTP requests")," and send ",Object(l.b)("inlineCode",{parentName:"p"},"HTTP responses"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Require the http module to start coding our server")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We don't have to run npm install as we're using a build in Node.js module")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Create a new server.js file and add the following code"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"server.js")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const http = require("http");\nconst port = 3000;\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We defined an http variable and assigned what http node module exported")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also we declared a port variable as we're going to need it to set up our server")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This means that our server will be listening at port 3000")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So now we need to create a server and we can do that using the ",Object(l.b)("inlineCode",{parentName:"p"},"createServer")," method")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This method accepts a callback function as parameter")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The callback function gets ",Object(l.b)("inlineCode",{parentName:"p"},"2 parameters")," that represents ",Object(l.b)("inlineCode",{parentName:"p"},"request & response"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This means that the callback function it's going to be executed on each request and we can handle the response"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const requestHandler = (request, response) => {\n  response.end("Hello Node.js Server!");\n};\n\nconst server = http.createServer(requestHandler);\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We'll use the requestHandler function as createServer callback")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This means that requestHandler recibes a request and response object that represents the http request & response")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"requestHandler will be executed on each HTTP request")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"When we get a request we need to send a response back")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we're sending just a text with ",Object(l.b)("inlineCode",{parentName:"p"},"'Hello Node.js Server!'")," content")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So far we haven't told the server on which port it should listen to")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can configure it using ",Object(l.b)("inlineCode",{parentName:"p"},"server.listen"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This method accepts the port number as first parameter")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"And a callback function as second parameter")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This function will get executed when the server start listening")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The callback function gets an error parameter that we can use to check if there's an error"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'server.listen(port, err => {\n  if (err) {\n    return console.log("something bad happened", err);\n  }\n\n  console.log(`server is listening on ${port}`);\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now we have all the code together"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const http = require("http");\nconst port = 3000;\n\nconst requestHandler = (request, response) => {\n  console.log(request.url);\n  response.end("Hello Node.js Server!");\n};\n\nconst server = http.createServer(requestHandler);\n\nserver.listen(port, err => {\n  if (err) {\n    return console.log("something bad happened", err);\n  }\n\n  console.log(`server is listening on ${port}`);\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Copy and paste this code into the server.js file")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Run the following command"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"node server.js\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"If everything goes well you will see the following message as output"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"server is listening on 3000\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also, you can configure ",Object(l.b)("inlineCode",{parentName:"p"},"npm start")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'"start": "node server.js"\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now we have a Node.js web server running")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Open the browser and input localhost:3000 as url")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We get a ",Object(l.b)("inlineCode",{parentName:"p"},"Hello Node.js Server!")," back")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As we can see we're using the configured 3000 port")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The server will stop if we cut the Node.js script executing")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"After doing it we won't get a response back from the server")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The HTTP module provides the basic features to have an HTTP server")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To create a real application we need more abstraction so we can handle more complexity")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This is the reason why we have many other modules that uses the basic HTTP adding more features and abstraction")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Some the of the most common web server modules are:"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"http://expressjs.com/"}),"Express")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"http://hapijs.com/"}),"Hapi")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"http://koajs.com/"}),"Koa")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"http://restify.com/"}),"Restify")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this course we'll use ",Object(l.b)("inlineCode",{parentName:"p"},"Express.js")))),Object(l.b)("h4",{id:"practice-2"},"Practice"),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_8"}),"Exercise 8")),Object(l.b)("h2",{id:"express"},"Express"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Using express we'll be able to execute the following tasks:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Handle any HTTP request (GET, POST, etc)"),Object(l.b)("li",{parentName:"ul"},"Create and handle specific routes"),Object(l.b)("li",{parentName:"ul"},"Configure templating engines to create dynamic HTML"),Object(l.b)("li",{parentName:"ul"},"Configure and use express ",Object(l.b)("inlineCode",{parentName:"li"},"middlewares")," to add more features"),Object(l.b)("li",{parentName:"ul"},"Configure our server the way we want"),Object(l.b)("li",{parentName:"ul"},"And much, much more!"))),Object(l.b)("li",{parentName:"ul"},"Express is a minimal and flexible Node.js web application framework"),Object(l.b)("li",{parentName:"ul"},"This is why we'll add many modules to configure our server like sessions, coockies and more"),Object(l.b)("li",{parentName:"ul"},"Some known modules are maintained by the ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"http://expressjs.com/en/resources/middleware.html"}),"express core team")),Object(l.b)("li",{parentName:"ul"},"There's no silver bullets on how to create/configure an Express server")),Object(l.b)("h3",{id:"create-a-web-server-using-express"},"Create a web server using Express"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We already saw how we can create and start a Node web server using the HTTP module")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now we need to learn how to do it using express")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The basic features are going to be the same:"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Request the module"),Object(l.b)("li",{parentName:"ul"},"Configure the server"),Object(l.b)("li",{parentName:"ul"},"Handle request"),Object(l.b)("li",{parentName:"ul"},"Send response"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The request object allow us to get a lot of data from the user like username & password, product id or search query")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using these values we can define what we should do, be it: interact with a database, create a session or just send some asset")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can configure express to respond with static content like we have been doing using HTTP-Server module")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also we can create dynamic content")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We might do it using a database or not")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To create dynamic content we'll use JavaScript and a template engine")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So, Express allows us to handle http routes for each request and configure the corresponding response")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Configure static assets")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Configure template engine")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"And for any other task we can add many different modules that will help us work better")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To have express working we need to first install it"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm i express\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now lets create a basic server by doing a Hello Node.js World example"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'// require the express module\nconst express = require("express");\n\n// then create a express server\nconst app = express();\n\n// configure the default route and send a text as response\napp.get("/", function(request, response) {\n  response.send("Hello Node.js World!");\n});\n\n// configure the port that express is going to listen to\napp.listen(3000, function() {\n  console.log("Example app listening on port 3000!");\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we see how to create a simple Express server")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We need to require the express module and create a express app/server")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Then we configure a GET default route ",Object(l.b)("inlineCode",{parentName:"p"},"/"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using the listen method we tell express on which port it will listen to HTTP requests and show a message when the server starts")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now that we have our server running we can visit ",Object(l.b)("inlineCode",{parentName:"p"},"localhost:3000")," using a browser to get the response back from the server"))),Object(l.b)("h4",{id:"practice-3"},"Practice"),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_9"}),"Exercise 9")),Object(l.b)("h3",{id:"using-get-routes"},"Using GET routes"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As you can see creating routes with express is really easy")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We use the ",Object(l.b)("inlineCode",{parentName:"p"},"get")," method to obtain ",Object(l.b)("inlineCode",{parentName:"p"},"GET")," requests")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This method accepts a string as first parameter that represents the route that we want to handle")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"For example we used ",Object(l.b)("inlineCode",{parentName:"p"},"/")," to handle our root route")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The second parameter is a callback function that accepts 2 objects (",Object(l.b)("inlineCode",{parentName:"p"},"request & response"),") as parameters")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The response object has a ",Object(l.b)("inlineCode",{parentName:"p"},"send")," method that we can use to send some data to the client as response")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Thats why we can see the message back when we send a request to our server"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.get("/", function(request, response) {\n  response.send("Hello World!");\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The express object has many methods to handle HTTP requests using different HTTP methods"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.post("/", function(req, res) {\n  res.send("Request using POST");\n});\n\napp.put("/", function(req, res) {\n  res.send("Request using PUT");\n});\n\napp.delete("/", function(req, res) {\n  res.send("Request using DELETE");\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also we can use an ",Object(l.b)("inlineCode",{parentName:"p"},"all")," method to handle any type of HTTP method")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can use this ",Object(l.b)("inlineCode",{parentName:"p"},"all")," method to configure ",Object(l.b)("inlineCode",{parentName:"p"},"middleware")," features for all our calls"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.all("/", function(req, res) {\n  res.send("Request using GET, POST, PUT or DELETE");\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now that we know how express routes work we can create some to handle a products routes"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.get("/products", function(req, res) {\n  res.send("On this call we show a list of products");\n});\n\napp.post("/product/:id", function(req, res) {\n  res.send("On this call we create a product");\n});\n\napp.put("/product/:id", function(req, res) {\n  res.send("On this call we update a product");\n});\n\napp.delete("/product/:id", function(req, res) {\n  res.send("On this call we delete a product");\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using the browser we can only use GET requests")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To use POST we need to create a form and set the method to POST")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This is why we have a tool called ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.getpostman.com/"}),"Postman")," (you can find more like this one) that will help us request using different HTTP methods")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Install and open Postman")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Configure the URL that we want to use (request)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We use the send button to create a request to the given URL using the selected HTTP method")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Then we can see the server response on the Postman lowers section of the screen"),Object(l.b)("p",{parentName:"li"},Object(l.b)("img",Object(n.a)({parentName:"p"},{src:"../resources/images/node/postman.png",alt:"Postman"})))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using Postman we can know the response status (in this example it's 200)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can also change the request and response HTTP headers")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"And configure different HTTP methods (POST, PUT, DELETE, etc)s"),Object(l.b)("p",{parentName:"li"},Object(l.b)("img",Object(n.a)({parentName:"p"},{src:"../resources/images/node/postman2.png",alt:"Postman"}))))),Object(l.b)("h4",{id:"practice-4"},"Practice"),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_10"}),"Exercise 10")),Object(l.b)("h3",{id:"response-handling"},"Response handling"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Using the ",Object(l.b)("inlineCode",{parentName:"li"},"response")," object we can send the response to the client and choose different formats"),Object(l.b)("li",{parentName:"ul"},"We can send JSON format if we're creating an API with the corresponding JSON headers"),Object(l.b)("li",{parentName:"ul"},"Also, we can send an HTML (static or dynamic) content as string too"),Object(l.b)("li",{parentName:"ul"},"You can read about all the response types that Express can handle on ",Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://expressjs.com/en/guide/routing.html#response-methods"}),"express doc"))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"JSON")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The response ",Object(l.b)("inlineCode",{parentName:"p"},"json")," method allows us to send the user some data in JSON format")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can pass a JavaScript object as parameter and the json method will transform it to JSON for us")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"It will also add the ",Object(l.b)("inlineCode",{parentName:"p"},"Content-Type application/json")," header"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.get("/", function(request, response) {\n  response.json({ name: "Marta", age: "40" });\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},'Then when we call this route we get: {"name":"Marta","age":"40"} back')),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also, we get the right headers too"),Object(l.b)("p",{parentName:"li"},Object(l.b)("img",Object(n.a)({parentName:"p"},{src:"../resources/images/node/json-header.png",alt:"JSON Header"}))))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"sendFile")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using the response ",Object(l.b)("inlineCode",{parentName:"p"},"sendFile")," method we can send a a file back")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can send any type of file and it will depend on the client if it knows how to read or interpretate this response")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"If we send html, images, audio, video, js or css and the client is a browser it will be able to handle this response"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const express = require("express");\nconst app = express();\nconst path = require("path");\n\napp.get("/", function(request, response) {\n  response.sendFile(path.join(__dirname, "index.html"));\n});\n\napp.listen(3000, function() {\n  console.log("Example app listening on port 3000!");\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we're using the ",Object(l.b)("inlineCode",{parentName:"p"},"path module")," to join Node.js special ",Object(l.b)("inlineCode",{parentName:"p"},"__dirname")," variable and the file name (index.html) that we want to send")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Path module has a join method that allows us to join this two values")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Node.js ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://nodejs.org/docs/latest/api/modules.html#modules_dirname"}),"_","_","dirname")," will return the current directory")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"By joining the current direname and the file name we're creating an absolute path so sendFile knows exactly where it needs to get the file from"))),Object(l.b)("h4",{id:"practice-5"},"Practice"),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_11"}),"Exercise 11")),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_12"}),"Exercise 12")),Object(l.b)("h3",{id:"express-router"},"Express Router"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"As we saw on the products route example we can have many routes for one resource and our server file can grow"),Object(l.b)("li",{parentName:"ul"},"To handle this routing config better we can use ",Object(l.b)("inlineCode",{parentName:"li"},"express router")),Object(l.b)("li",{parentName:"ul"},"We'll be grouping our routes by action or resource type"),Object(l.b)("li",{parentName:"ul"},"It's easier to read and maitain our server routes this way")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"home.js"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'// Create the express router to handle our home requests\nvar express = require("express");\nvar router = express.Router();\n\nrouter.get("/", function(req, res) {\n  res.send("Welcome to our Site!");\n});\n\nmodule.exports = router;\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"products.js"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'// Create the express router to handle our products requests\nvar express = require("express");\nvar router = express.Router();\n\nrouter.get("/", function(req, res) {\n  res.send("On this call we show a list of products");\n});\n\nrouter.post("/:id", function(req, res) {\n  res.send("On this call we create a product");\n});\n\nrouter.put("/:id", function(req, res) {\n  res.send("On this call we update a product");\n});\n\nrouter.delete("/:id", function(req, res) {\n  res.send("On this call we delete a product");\n});\n\nmodule.exports = router;\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"index.js"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Mount the routes")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const express = require("express");\nconst app = express();\n\n// Routers\nconst home = require("./home.js");\nconst products = require("./products.js");\n\napp.use("/", home);\napp.use("/products", products);\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we see how we can have multiple routers using the express ",Object(l.b)("inlineCode",{parentName:"p"},"Router")," module")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Each router that we create can be mounted on the express app and configure the url that it need to handle")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Use express.Router() to create a new router")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"router.get / router.post")," will handle the get and post HTTP methods")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Then using ",Object(l.b)("inlineCode",{parentName:"p"},"app.use")," we tell express to use this routes handlers")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We call this process ",Object(l.b)("inlineCode",{parentName:"p"},"router mounting")))),Object(l.b)("h4",{id:"practice-6"},"Practice"),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_13"}),"Exercise 13")),Object(l.b)("h3",{id:"status-and-error-handling"},"Status and error handling"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The response object has a ",Object(l.b)("inlineCode",{parentName:"p"},"status")," method that allows us to set the HTTP status response codes")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"By default is 200")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"It accepts a number as parameter")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can also chain this method with others like send"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.get("/", function(request, response) {\n  res.status(200).json({ firsname: "Pepe", lastname: "Martin" });\n});\n\napp.get("/error", function(request, response) {\n  res.status(500).send("Server error");\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In the first example we set 200 as status code and send a JavaScript object as JSON as response")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"On the error call we want to send an error status back so we set 500 to let the user know that there's a server error")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also, we can handle 404 routes the following way:"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.use(function(req, res, next) {\n  res.status(404).send("Sorry can\'t find that!");\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we don't specify the route that we want to handle")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"If the request doesn't match any of the other routes it will execute this one at last")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As it didn't found the route we can send a 404 as there's no document to send")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We could send a file back too with a ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.creativebloq.com/web-design/best-404-pages-812505"}),"cool 404 message"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Express also allows us to handle errors")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"It's going to be similar to 404")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We need to add one more parameter that's the error one")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The callback function now will have the following parameter: ",Object(l.b)("inlineCode",{parentName:"p"},"error, request, response and next"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"If we get an error message we can send it to as response")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This functions that we pass as parameters are called middleware")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The next parameter allows us to call the next express middleware (we'll talk more about it on the next section)"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.use(function(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send("Something broke!");\n});\n')))),Object(l.b)("h4",{id:"practice-7"},"Practice"),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_14"}),"Exercise 14")),Object(l.b)("h3",{id:"middleware"},"Middleware"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"A ",Object(l.b)("strong",{parentName:"p"},"Middleware")," is a function that has access to the request & response objects")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can chain middleware calls using the ",Object(l.b)("inlineCode",{parentName:"p"},"next")," function in the application\u2019s request-response cycle")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The ",Object(l.b)("inlineCode",{parentName:"p"},"next")," function is a function in the Express router which, when invoked, executes the middleware succeeding the current middleware")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So this means that the middleware gets three parameters: ",Object(l.b)("inlineCode",{parentName:"p"},"request, response and a function callback called next"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Express has many middlewares that we can install, configure and use"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const express = require("express");\nconst app = express();\n\nconst myMiddleware = function(req, res, next) {\n  // We set a new property in the request object\n  req.someValue = "This is a value to test the Middleware";\n\n  // We call the next middleware\n  next();\n};\n\napp.listen(3000);\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To use a middleware we use the express ",Object(l.b)("inlineCode",{parentName:"p"},"use")," method")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This method accepts the function callback as parameter that will get executed on each request"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const express = require("express");\nconst app = express();\n\nconst myMiddleware = function(req, res, next) {\n  req.someValue = "This is a value to test the Middleware";\n\n  next();\n};\n\napp.use(myMiddleware); // Add a middleware\n\napp.listen(3000);\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now we can define a new route"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const express = require("express");\nconst app = express();\n\nconst myMiddleware = function(req, res, next) {\n  req.someValue = "This is a value to test the Middleware";\n\n  next();\n};\n\napp.use(myMiddleware);\n\napp.get("/", (req, res) => {\n  const responseMessage = req.someValue; // We get the request value that we setted from the middleware\n\n  res.send(responseMessage);\n});\n\napp.listen(3000);\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So, a middleware is just a function that will get executed on each request")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The callback function will accept three parameters:"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"req: ",Object(l.b)("inlineCode",{parentName:"li"},"request")," object"),Object(l.b)("li",{parentName:"ul"},"res: ",Object(l.b)("inlineCode",{parentName:"li"},"response")," object"),Object(l.b)("li",{parentName:"ul"},"next: it's a function to call the following middleware"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To call the next middleware we need to call ",Object(l.b)("inlineCode",{parentName:"p"},"next()")," function")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using the express app and the ",Object(l.b)("inlineCode",{parentName:"p"},"use")," method we can configure express to use middlewares")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"For example we can use other modules like ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/expressjs/morgan"}),"morgan"),":"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const express = require("express");\nconst logger = require("morgan");\nconst app = express();\n\napp.use(logger("dev"));\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this case we imported ",Object(l.b)("inlineCode",{parentName:"p"},"morgan")," and configured it as a middleware")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can use morgan as our server logger")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Learn about morgan and how to use it reading the module doc")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using other express middleware is really simple")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"http://expressjs.com/en/resources/middleware.html"}),"Express Middlewares"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Learn more about ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://expressjs.com/guide/writing-middleware.html"}),"Express middleware reading the docs")))),Object(l.b)("h4",{id:"practice-8"},"Practice"),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_15"}),"Exercise 15")),Object(l.b)("h3",{id:"static-content"},"Static Content"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So far we created routes to handle our requests")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Many times we just need to return a file like index.html, styles.css or scripts.js")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"All this files doesn't change on the server as they're all static assets")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can configure express to serve statics files from a folder")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"By convention we call this folder public")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Express has a ",Object(l.b)("inlineCode",{parentName:"p"},"static")," method that accepts one string parameter")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This parameter represents the static folder name")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As this method returns a function we can use it as a middleware")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We use express ",Object(l.b)("inlineCode",{parentName:"p"},"use")," method to configure a middleware"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const express = require("express");\nconst app = express();\n\napp.use(express.static("public"));\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we set a public folder to serve our static assets")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So for example we can call the express server and request for files like index.html, styles.css or scripts.js"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"http://localhost:3000/img/logo.png"}),"http://localhost:3000/img/logo.png")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"http://localhost:3000/js/script.js"}),"http://localhost:3000/js/script.js")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"http://localhost:3000/css/styles.css"}),"http://localhost:3000/css/styles.css")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"http://localhost:3000/index.html"}),"http://localhost:3000/index.html")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We don't need to define our own routes for static assets (get, post, etc)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"If we take a deep look to this urls we can see that the public folder will be our site root for static assets"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"/\n|-public\n| |- img\n| |  |- logo.png\n| |\n| |- js\n| |  |- script.js\n| |\n| |- css\n| |  |- styles.css\n|\n|- index.html\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can also create a static assets alias using")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To create an alias we use the alias name as ",Object(l.b)("inlineCode",{parentName:"p"},"app.use")," first parameter")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Then we pass the middleware as second parameter"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const express = require("express");\nconst app = express();\n\napp.use("/assets", express.static("public"));\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we create ",Object(l.b)("inlineCode",{parentName:"p"},"/assets")," as our public static assets")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This means that using ",Object(l.b)("inlineCode",{parentName:"p"},"/assets")," as url we'll have access to the ",Object(l.b)("inlineCode",{parentName:"p"},"public")," folder content")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Due to this change we need to update the way that we call our assets:"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"http://localhost:3000/assets/img/logo.png"}),"http://localhost:3000/assets/img/logo.png")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"http://localhost:3000/assets/js/script.js"}),"http://localhost:3000/assets/js/script.js")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"http://localhost:3000/assets/css/styles.css"}),"http://localhost:3000/assets/css/styles.css")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"http://localhost:3000/assets/index.html"}),"http://localhost:3000/assets/index.html")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using an alias we don't let the user know about our folder architecture")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also, we can use any folder for our static assets")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can change the folder name without having to update the alias")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also we can configure more than one folder in case we need to")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Express will keep on looking for assets in all configured folders in case that it doesn't find it"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.use(express.static("public"));\napp.use(express.static("imgs"));\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this case express will try to find first our assets on the ",Object(l.b)("inlineCode",{parentName:"p"},"public")," folder")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"If it doesn't find it, then it will look for them on the ",Object(l.b)("inlineCode",{parentName:"p"},"imgs")," folder"))),Object(l.b)("h4",{id:"practice-9"},"Practice"),Object(l.b)("p",null,Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"/node_comit/docs/exercises/node/ex_16"}),"Exercise 16")),Object(l.b)("h3",{id:"templates"},"Templates"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using express we can configure a template engine")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Express can use many ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"http://expressjs.com/en/guide/using-template-engines.html"}),"different templates engines"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We'll use Pug as it's express default template engine")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Pug it\u2019s a high performance and feature-rich templating engine")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Pug helps us write shorter HTML content")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This template used to be called ",Object(l.b)("inlineCode",{parentName:"p"},"Jade")," and it was renamed to ",Object(l.b)("inlineCode",{parentName:"p"},"Pug"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Pug works with indentation or white spaces (like Python)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To see Pug in action we'll have to configure express to use Pug as template engine and also create our first template")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Install pug and set it as template engine"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"npm install pug --save\n")),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.set("view engine", "pug");\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Use ",Object(l.b)("inlineCode",{parentName:"p"},"app.set")," method to set our ",Object(l.b)("inlineCode",{parentName:"p"},"view engine")," and use ",Object(l.b)("inlineCode",{parentName:"p"},"pug"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"And now we create our first pug template")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As it's a pug template we'll use the ",Object(l.b)("inlineCode",{parentName:"p"},".pug")," extension"))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example:")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"index.pug"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"doctype html\nhtml(lang='en')\n  head\n    title= title\n  body\n    h1= message\n    div.container\n    p Starting using Pug!\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In some way this looks like HTML but it's much shorter as we're using Pug to write the template")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To use this template from express we need to save it on the views folder")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"If you don't have a views folder you can create one"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Project structure:")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"/\n|- index.js\n|- views\n    |- index.pug\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The html, head, title, body & h1 template values will render the corresponding HTML tags")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Pug compiles this templates into HTML and it will throw a compilation error if identation it's not right")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using pug we can assign values to the elements in the following way: ",Object(l.b)("inlineCode",{parentName:"p"},"title= title")," or ",Object(l.b)("inlineCode",{parentName:"p"},"h1= message"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In boths cases we're assigning a value to the title element and the h1 too")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now we need to pass those values to the template so it can render it")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("inlineCode",{parentName:"p"},"title & message")," are JavaScript variables")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using the ",Object(l.b)("inlineCode",{parentName:"p"},"=")," operator in pug will assign the variables value as HTML element content")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Use ",Object(l.b)("inlineCode",{parentName:"p"},".classname")," to define a class name like div.container")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"And we can just write text if it's static content like ",Object(l.b)("inlineCode",{parentName:"p"},"p Starting using Pug!")," where the element p will have Starting using Pug! as content"),Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"index.js")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const express = require("express");\nconst app = express();\n\napp.set("view engine", "pug");\n\napp.get("/", (req, res) => {\n  res.render("index", { title: "Hey", message: "Hello there!" });\n});\n\napp.listen(3000);\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we configured a root route")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using the response ",Object(l.b)("inlineCode",{parentName:"p"},"render")," method we can send a response to the user")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The render method accepts two parameters"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"The first parameter is the template name"),Object(l.b)("li",{parentName:"ul"},"The second parameter is a JavaScript object where each property will become a template variable"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So, calling ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"http://localhost:3000"}),"http://localhost:3000")," will render the index.pug template passing Hey text as title value and Hello there! as message")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Express will render the template and create the content to send to the user")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The final template result will be:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <title>Hey</title>\n  </head>\n  <body>\n    <h1>Hello there!</h1>\n    <div class="container">\n      <p>Starting using Pug!</p>\n    </div>\n  </body>\n</html>\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"You can read more about the render method on ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"http://expressjs.com/api.html#app.render"}),"Express render doc"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using Pug we have different ways to set HTML content")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We already saw that we can change the content using variables")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also, we can use three different ways to set static content:"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Leaving one space between the element and the content",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"p text as content\n"))),Object(l.b)("li",{parentName:"ul"},"Adding pipe and indentation",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"p\n  | text as content\n"))),Object(l.b)("li",{parentName:"ul"},"Finally using a dot and indentation",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"p.\n  text as content\n"))))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Use parenthesis to write HTML element attributes"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"a(href='contat.html', target='_blank') Contact\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Once this renders it will became a link tag with href and target attributes"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'<a href="contact.html" target="_blank">Contact</a>\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Use ids and classes using the CSS notation, ",Object(l.b)("inlineCode",{parentName:"p"},"#")," for ids and ",Object(l.b)("inlineCode",{parentName:"p"},".")," for classes"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"div#main main content\ndiv.red text in red\n")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'<div id="main">main content</div>\n<div class="red">text in red</div>\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also, we can combine ids and classes"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"div#container.left\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Pug has link and script tags support")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We use the tag name and parenthesis for the attributes like the rest of the elements"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"link(href='/css/styles.css', rel='stylesheet')\n\nscript(src='/js/scripts.js')\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can also add css and js code as content in case we need to add styles or JavaScript to the document")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"For CSS we need to replace link for style but for JavaScript it will still be script (like in the HTML that we already know)"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"style.\n  body {\n    color: red;\n  }\n\nscript(type='text/javascript').\n  const message = 'Using JS from PUG';\n  alert(message);\n")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  body {\n    color: red;\n  }\n</style>\n\n<script type="text/javascript">\n  const message = "Using JS from PUG";\n  alert(message);\n<\/script>\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So far Pug it's great but we're still building a complete HTML document")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"It would be nice to have a more modular way of building our UI so we can reuse sections")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Pug has mixin support that allow us to use code blocks")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"product-mixin.pug"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"mixin product\n  .product-wrapper\n    h2 Product\n    p Product description\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now that we created the product mixin we can include it on our index.pug file and use it")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"index.pug"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"include product-mixin\n\nbody\n  +product\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we use pug include to get the mixin content and call it from the index template")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using ",Object(l.b)("inlineCode",{parentName:"p"},"+")," we let Pug know that this is a mixin that we want to use")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can think about mixin like functions that we call")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"At this moment we're using the product code but it's just static so it's not that helpful")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Adding variables we can make this mixin more useful")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"product-mixin.pug"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"mixin product(product)\n  .product-wrapper\n    h2= product.title\n    p= product.description\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"index.pug"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"include product-mixin\n\nbody\n  +product({title: 'PS4 Pro', description: 'Best console ever, so far..' })\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we added a product parameter to the mixin so we can pass data to it")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"When we call the mixin now we need to pass the product object as it's what the mixin is using")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Once Pug renders this template we get the expected output"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'<section>\n  <div class="product-wrapper">\n    <h2>PS4 Pro</h2>\n    <p>Best console ever, so far..</p>\n  </div>\n</section>\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can re-use this mixin for other products")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"index.pug"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"include product-mixin\n\nbody\n  section\n    +product({title: 'PS4 Pro', description: 'Best console ever, so far..' })\n  section\n    +product({title: 'XBOX', description: 'Other great console' })\n")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'<section>\n  <div class="product-wrapper">\n    <h2>PS4 Pro</h2>\n    <p>Best console ever, so far..</p>\n  </div>\n</section>\n<section>\n  <div class="product-wrapper">\n    <h2>XBOX</h2>\n    <p>Other great console</p>\n  </div>\n</section>\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Learn more about mixins on ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://pugjs.org/language/mixins.html"}),"Pug mixin docs"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Pug supports template inheritance")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To use this useful feature we need to use ",Object(l.b)("inlineCode",{parentName:"p"},"block and extends keywords"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"A ",Object(l.b)("inlineCode",{parentName:"p"},"block")," is simply a \u201cblock\u201d of Pug that a child template may replace over the template")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This process is recursive")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Pug blocks can provide default content in case we need it")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This provides a default content and is purely optional")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The following example defines a scripts, content & foot block")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"layout.pug"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"doctype html\nhtml(lang='en')\n  head\n    title= title\n    style(type=\"text/css\").\n      body {\n        color: red;\n      }\n    block scripts\n  body\n    block content\n    block foot\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"With this layout we can call the scripts, content and foot blocks")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now we can extend this layout for other templates")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"index.pug"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"extends ./layout.pug\ninclude product-mixin\n\nblock scripts\n  script.\n    alert('alert from a block');\n\nblock content\n  h1= message\n  div.container\n    p Starting using Pug!\n  p\n    | text as content\n  p.\n    text as content\n  p text as content\n  a.foo_link(href='about.html', target='_blank') About Us\n  div#main main content\n  div.red text in red\n  section\n    +product({title: 'PS4 Pro', description: 'Best console ever, so far..' })\n  section\n    +product({title: 'XBOX', description: 'Other great console' })\n\nblock foot\n  div This footer content comes from a block\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using block scripts we're able to add code to the scripts layout section")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The same happens with content and foot")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Once Pug renders everything together we get the final HTML result"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <title>Hey</title>\n    <style type="text/css">\n      body {\n        color: red;\n      }\n    </style>\n    <script>\n      alert("alert from a block");\n    <\/script>\n  </head>\n  <body>\n    <h1>Hello there!</h1>\n    <div class="container">\n      <p>Starting using Pug!</p>\n    </div>\n    <p>text as content</p>\n    <p>text as content</p>\n    <p>text as content</p>\n    <a class="foo_link" href="about.html" target="_blank">About Us</a>\n    <div id="main">main content</div>\n    <div class="red">text in red</div>\n    <section>\n      <div class="product-wrapper">\n        <h2>PS4 Pro</h2>\n        <p>Best console ever, so far..</p>\n      </div>\n    </section>\n    <section>\n      <div class="product-wrapper">\n        <h2>XBOX</h2>\n        <p>Other great console</p>\n      </div>\n    </section>\n    <div>This footer content comes from a block</div>\n  </body>\n</html>\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"You can learn more about layouts and blocks on the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://pugjs.org/language/inheritance.html"}),"Pug inheritance docs"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So far we learned a lot about Pug and how it works and it looks like it's a really helpful tool to build our ui")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"But we're still missing some main features like using js code, iterating elements or using conditionals inside our templates")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Use ",Object(l.b)("inlineCode",{parentName:"p"},"-")," to define JavaScript variables inside the templates"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"- const niceTitle = 'This is a nice title';\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Then we can use this title variable on our templates"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"h1= niceTitle\np This template has a nice #{niceTitle}\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we defined a niceTitle string variable with the text: This is a nice title")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The we used this variable on our template in two different ways"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"First we assign ",Object(l.b)("inlineCode",{parentName:"li"},"niceTitle")," value as ",Object(l.b)("inlineCode",{parentName:"li"},"h1 element content")," using ",Object(l.b)("inlineCode",{parentName:"li"},"=")," operator"),Object(l.b)("li",{parentName:"ul"},"The we used the same ",Object(l.b)("inlineCode",{parentName:"li"},"niceTitle")," value as string Interpolation using ",Object(l.b)("inlineCode",{parentName:"li"},"#{niceTitle}")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We could even use HTML encoded content and Pug will escape that content for us"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"- myDivContent = '<span>This content is from a template variable</span>';\n\ndiv This div has a span #{myDivContent}\n")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),"<div>\n  This div has a span &lt;span&gt;This content is from a template\n  variable&lt;/span&gt;\n</div>\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can see that Pug will replace the ",Object(l.b)("inlineCode",{parentName:"p"},"< >")," simbols for the HTML entities so we can show the HTML tags as content instead of real html content")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"You can learn more about string interpolation, escape sequence, whitespace and more on ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://pugjs.org/language/interpolation.html"}),"Pug interpolation docs"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can use conditional inside our templates"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),'- var language = "spanish"\n\nif language == "spanish"\n    p Estas programando muy bien, felicitaciones!!\nelse\n    p Your code rocks, Congrats!!\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this case we'll get the following HTML as we defined language as spanish")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also, we could change the language value to other language and we'll see the message in english"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),"<p>Estas programando muy bien, felicitaciones!!</p>\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Pug gives us a ",Object(l.b)("inlineCode",{parentName:"p"},"unless")," that works like a negated if (!)"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),'unless language != "spanish"\n  p Your code rocks, Congrats!!\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Learn more about conditionals on ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://pugjs.org/language/conditionals.html"}),"Pug conditionals doc"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We have different options to iterate over our values using Pug")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Use each to iterate over an array"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"- hookCharacters = ['Peter', 'Nana', 'Captain Hook']\n\nul\n  each character in hookCharacters\n    li= character\n")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),"<ul>\n  <li>Peter</li>\n  <li>Nana</li>\n  <li>Captain Hook</li>\n</ul>\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we use a local array but we could get this value from express and the render method")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using ",Object(l.b)("inlineCode",{parentName:"p"},"each")," we get each value of the array")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this case we iterate the ",Object(l.b)("inlineCode",{parentName:"p"},"hookCharacters")," array")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So on each iteration we get a ",Object(l.b)("inlineCode",{parentName:"p"},"character")," value")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Then we tell Pug to use the character name as li element content ",Object(l.b)("inlineCode",{parentName:"p"},"li= character"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can also get the iteration index"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"- hookCharacters = ['Peter', 'Nana', 'Captain Hook']\n\nul\n  each character, index in hookCharacters\n    li= index + ': ' + character\n")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),"<ul>\n  <li>0: Peter</li>\n  <li>1: Nana</li>\n  <li>2: Captain Hook</li>\n</ul>\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can also use ",Object(l.b)("inlineCode",{parentName:"p"},"while")," as PUG iterator"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"- var n = 0;\nul\n  while n < 4\n    li= n++\n")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),"<ul>\n  <li>0</li>\n  <li>1</li>\n  <li>2</li>\n  <li>3</li>\n</ul>\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Learn more about iteration on ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://pugjs.org/language/iteration.html"}),"Pug iteration doc"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Check out Pug assets and sources to learm much more about this powerful template engine"),Object(l.b)("p",{parentName:"li"},Object(l.b)("img",Object(n.a)({parentName:"p"},{src:"../resources/images/node/pug.jpg",alt:"Pug"}))))),Object(l.b)("h2",{id:"sendinggetting-data-from-the-client-to-the-server"},"Sending/getting data from the client to the server"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To send data from the client to the server we can use forms or ajax calls")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using forms we'll be able to send values using GET and POST")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"By doing AJAX calls we can use HTTP GET, POST, UPDATE and DELETE")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We need to configure Express routes to get the request values using one of this methods")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"If the server expects the values from GET, the client will send them using GET method")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In case the server expects the value from POST, the client will send them using POST method")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So we need to send values to the server the way it expected them")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"One of the most simple way to pass a value to the route handler is using the express params")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"For example we can create a route handler for ",Object(l.b)("inlineCode",{parentName:"p"},"/products/")," and add a product id")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this case the URL it's going to look like: ",Object(l.b)("inlineCode",{parentName:"p"},"http://localhost:3000/products/1"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this case we're calling the products handler and passing an id to it")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Express has a special way to configure URL parameters and it's using ",Object(l.b)("inlineCode",{parentName:"p"},":")," on the route handler")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"For example we can create a route like ",Object(l.b)("inlineCode",{parentName:"p"},"/products/:id"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this URL ",Object(l.b)("inlineCode",{parentName:"p"},":id")," it's the parameter that we're going to pass")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Lets define the route this way"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.get("/products/:id", (req, res) => {\n  res.send("Product with the id: ");\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we see that we can create a route handler that it's expecting a URL parameter")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this case the url it's going to be ",Object(l.b)("inlineCode",{parentName:"p"},"http://localhost:3000/products/10"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now we need to know how to retrieve this id parameter using Express")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The request object has a params property that it's an object with all the parameters that this request has")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As we configured ",Object(l.b)("inlineCode",{parentName:"p"},":id")," and we called using ",Object(l.b)("inlineCode",{parentName:"p"},"/products/10")," there's going to be an ",Object(l.b)("inlineCode",{parentName:"p"},"id")," property on the request.params object")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To get the id from the url we use ",Object(l.b)("inlineCode",{parentName:"p"},"req.params.id")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.get("/products/:id", (req, res) => {\n  const id = req.params.id;\n\n  res.send(`Product with the id: ${id}`);\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we see how using req.params.id we can get the id from the URL")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Other way to send values to the server it's using query string")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We know that using an url like ",Object(l.b)("inlineCode",{parentName:"p"},"http://localhost:3000/products/?id=1")," we are passing ",Object(l.b)("inlineCode",{parentName:"p"},"id=1")," as query string")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The request object has a query property that allows us to get the URL query string params")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using ",Object(l.b)("inlineCode",{parentName:"p"},"req.query")," we get an object back that represents the URL query string")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this case we want to get the id value so we can do ",Object(l.b)("inlineCode",{parentName:"p"},"req.query.id")," to get ",Object(l.b)("inlineCode",{parentName:"p"},"1")," as value back"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.get("/products", (req, res) => {\n  const id = req.query.id;\n\n  res.send(`Product with the id: ${id}`);\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we see that the route it's waiting for a query parameter with the id name")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"If we call ",Object(l.b)("inlineCode",{parentName:"p"},"http://localhost:3000/products?id=1")," we pass id as query parameter with value 1")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this case this req.query.id will become 1 and we assign it to the id variable")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So we can say that this are two different ways to pass values using GET and express routes")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Notice the different between using ",Object(l.b)("inlineCode",{parentName:"p"},"/products/:id")," and ",Object(l.b)("inlineCode",{parentName:"p"},"req.params.id"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The other option is to use ",Object(l.b)("inlineCode",{parentName:"p"},"/products")," and query string like ",Object(l.b)("inlineCode",{parentName:"p"},"req.query.id"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now that we know this we can create a form and send values to the server"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'<form action="/products" method="get">\n  <input type="text" name="username" placeholder="username" />\n  <input type="text" name="firstname" placeholder="firstname" />\n  <input type="text" name="lastname" placeholder="lastname" />\n  <input type="submit" value="Submit" />\n</form>\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This form has three inputs username, firstname & lastname")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"When we submit this form all this values will be submitted to ",Object(l.b)("inlineCode",{parentName:"p"},"/products"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As the form is configured to use GET it will send all this values using query string")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The URL it's going to look like: ",Object(l.b)("inlineCode",{parentName:"p"},"http://localhost:3000/products?username=nisnardi&firstname=nicolas&lastname=isnardi"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can see that we'll have a ",Object(l.b)("inlineCode",{parentName:"p"},"username, firstname & lastname")," values")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"On the Express route handler this will become:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"req.query.username;\nreq.query.firstname;\nreq.query.lastname;\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now we can configure our route to handle this values"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.get("/products", (req, res) => {\n  const username = req.query.username;\n  const firstname = req.query.firstname;\n  const lastname = req.query.lastname;\n\n  res.send(\n    `We got the following values from the query string: ${username}, ${firstname} & ${lastname}`\n  );\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can see that we can use query string to retrieve values from the form")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As we sent them using GET from the form we need to use req.query to retrieve the values")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Once the route handler gets executed it will get the query values and we define three variables to store each query string value")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Then we just send the response using this query string values"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"We got the following values from the query string: nisnardi, nicolas & isnardi\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To send data to the server using POST we can change the form action"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'<form action="/products" method="post">\n  <input type="text" name="username" placeholder="username" />\n  <input type="text" name="firstname" placeholder="firstname" />\n  <input type="text" name="lastname" placeholder="lastname" />\n  <input type="submit" value="Submit" />\n</form>\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As you can see the only value that changed is ",Object(l.b)("inlineCode",{parentName:"p"},'method="post"')," (it used to be get)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now the values won't be submitted as query string and instead we'll send them on the request body")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To use Express to get POST values we need to add ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/expressjs/body-parser"}),"body-parser")," that's a Express middleware")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Body parser can get all the POST requests or we can configure it just fo the routes that we want")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Then it will get the POST values and append then as request body property")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"So in this case we're sending ",Object(l.b)("inlineCode",{parentName:"p"},"username, firstname & lastname"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"And they will become ",Object(l.b)("inlineCode",{parentName:"p"},"req.body.username, req.body.firstname & req.body.lastname")," after executing body-parser as middleware")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To use this module we need to install it"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"npm install body-parser\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Once we installed the module we need to configure it"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const bodyParser = require("body-parser");\nconst urlencodedParser = bodyParser.urlencoded({ extended: false });\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"First we required body-parser module")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Then we configure body-parser for urlencoded (the form enctype that we use by default)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We assign the body-parser return value to the ",Object(l.b)("inlineCode",{parentName:"p"},"urlencodedParser"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now we can use this middleware in our routes")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We'll add ",Object(l.b)("inlineCode",{parentName:"p"},"urlencodedParser")," to any route that we want body-parser to append the POST values into the request body"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.post("/products", urlencodedParser, (req, res) => {\n  const username = req.body.username;\n  const firstname = req.body.firstname;\n  const lastname = req.body.lastname;\n\n  console.log(req.body);\n\n  res.send(\n    `We got the following values from the query string: ${username}, ${firstname} & ${lastname}`\n  );\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we configured a post route handler for ",Object(l.b)("inlineCode",{parentName:"p"},"/products/"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"When we submit the form it will send the request to this route handler")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The request will send all the form values")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using ",Object(l.b)("inlineCode",{parentName:"p"},"urlencodedParser")," we configure this route to use body-parser")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This means that when this route gets called we'll have all the form values in the ",Object(l.b)("inlineCode",{parentName:"p"},"req.body")," object")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To get the values sent from the form we use: ",Object(l.b)("inlineCode",{parentName:"p"},"req.body.username, req.body.firstname & req.body.lastname"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This names comes from the form inputs name")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"When we show the ",Object(l.b)("inlineCode",{parentName:"p"},"req.body")," value on the console we get:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"{\n  username: 'nisnardi',\n  firstname: 'nicolas',\n  lastname: 'isnardi'\n}\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The req.body it's a JavaScript object and body-parsed added username, firstname & lastname as properties")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Then using this properties we can get the values")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The last thing that we need to know is how to send files")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Express won't handle our files upload so we need to use a module called ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/expressjs/multer"}),"Multer"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Multer works in a similar way that body-parser")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can only use multer if we're uploading images")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Something really important is that as we're going to be uploading a file we need to set the form enctype in a different way")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"When using multer set the ",Object(l.b)("inlineCode",{parentName:"p"},"form enctype")," to ",Object(l.b)("inlineCode",{parentName:"p"},"multipart/form-data"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Multer will append the values to the request body")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can configure multer to use one or many files")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"For now we can configure to use it with one file to make it easier")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"First we need to install multer to our project"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"npm i multer\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Now that we have multer installed we need to require ir and configure it"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const multer = require("multer");\nconst upload = multer({ dest: "upload" });\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"After requiring multer as module we need to configure the folder that we're going to store the uploaded images")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this case we configured ",Object(l.b)("inlineCode",{parentName:"p"},"upload")," as the destination folder")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As we're going to send a file we need to update our form"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'<form action="/products" method="post" enctype="multipart/form-data">\n  <input type="text" name="username" placeholder="username" />\n  <input type="text" name="firstname" placeholder="firstname" />\n  <input type="text" name="lastname" placeholder="lastname" />\n  <input type="file" name="file" />\n  <input type="submit" value="Submit" />\n</form>\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"To upload the file we need to change the ",Object(l.b)("inlineCode",{parentName:"p"},'enctype="multipart/form-data"')," so multer can take care of it")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Also we need to add a ",Object(l.b)("inlineCode",{parentName:"p"},'<input type="file" name="file">'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Note that the name of the input is ",Object(l.b)("inlineCode",{parentName:"p"},"file")," as this is the value that we need to set up in multer too"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'app.post("/products", upload.single("file"), (req, res) => {\n  const filename = req.file.originalname;\n\n  console.log(req.body);\n  console.log(req.file);\n\n  res.send(`Congrats we uploaded the following file ${filename}`);\n});\n'))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"in this example we can see that multer will store the inputs values into the request body (the same as body-parser)")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"The body object will look something like:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"{\n  username: 'nisnardi',\n  firstname: 'nicolas',\n  lastname: 'isnardi'\n}\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we see that it looks the same way that using body-parser")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"As we configure ",Object(l.b)("inlineCode",{parentName:"p"},"upload.single('file')")," we told multer to get the ",Object(l.b)("inlineCode",{parentName:"p"},"file")," value and upload it to the ",Object(l.b)("inlineCode",{parentName:"p"},"upload")," folder")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Using ",Object(l.b)("inlineCode",{parentName:"p"},"req.file")," we can access the uploaded file values")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"When we configure multer with ",Object(l.b)("inlineCode",{parentName:"p"},"upload.single")," it will use ",Object(l.b)("inlineCode",{parentName:"p"},"req.file")," to append all the file values")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Remember that we used ",Object(l.b)("inlineCode",{parentName:"p"},"file")," as input name")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"If we use other input name like ",Object(l.b)("inlineCode",{parentName:"p"},"avatar")," we still use req.file to get the values but ",Object(l.b)("inlineCode",{parentName:"p"},"upload.single('avatar')")," to configure the rout handler")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Our ",Object(l.b)("inlineCode",{parentName:"p"},"req.file")," object will look like this:"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"{\n  fieldname: 'file',\n  originalname: 'lukecage.jpg',\n  encoding: '7bit',\n  mimetype: 'image/jpeg',\n  destination: 'upload',\n  filename: '7b4f43860a856577f5c47aba1ae592c5',\n  path: 'upload/7b4f43860a856577f5c47aba1ae592c5',\n  size: 13078\n}\n"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"In this example we can see that using ",Object(l.b)("inlineCode",{parentName:"p"},"originalname")," property we get the uploaded file real name")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Multer will add a random name to the uploaded file by default ",Object(l.b)("inlineCode",{parentName:"p"},"filename: '7b4f43860a856577f5c47aba1ae592c5'"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"This means that the file on the server won't be ",Object(l.b)("inlineCode",{parentName:"p"},"lukecage.jpg")," but ",Object(l.b)("inlineCode",{parentName:"p"},"7b4f43860a856577f5c47aba1ae592c5"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"We can configure multer to use a different file name in case we want to")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"You can read about it on the ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/expressjs/multer"}),"multer doc"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Express has many cool forms to handle sessions, form validations, security and much more!")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Go for it and look for more Express modules and learn how to use it by reading the modules doc")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://medium.com/@bmshamsnahid/nodejs-file-upload-using-multer-3a904516f6d2"}),"Node.js file upload using Multer")))),Object(l.b)("h2",{id:"were-crazy-about-javascript-nodejs-and-expressjs"},"We're CRAZY about JavaScript, Node.js and Express.js"),Object(l.b)("p",null,Object(l.b)("img",Object(n.a)({parentName:"p"},{src:"../resources/images/node/crazy1.gif",alt:"The End"}))),Object(l.b)("p",null,Object(l.b)("img",Object(n.a)({parentName:"p"},{src:"../resources/images/node/crazy2.webp",alt:"The End"}))),Object(l.b)("p",null,Object(l.b)("img",Object(n.a)({parentName:"p"},{src:"../resources/images/node/crazy3.webp",alt:"The End"}))),Object(l.b)("p",null,Object(l.b)("img",Object(n.a)({parentName:"p"},{src:"../resources/images/node/crazy4.webp",alt:"The End"}))),Object(l.b)("p",null,Object(l.b)("img",Object(n.a)({parentName:"p"},{src:"../resources/images/node/crazy5.webp",alt:"The End"}))),Object(l.b)("h2",{id:"assets--sources"},"Assets / Sources"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://nodeschool.io/"}),"NodeSchool - Free Node.js, JavaScript and more courses")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://pugjs.org"}),"pugjs.org")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://codeburst.io/getting-started-with-pug-template-engine-e49cfa291e33"}),"Codeburst - getting-started-with-pug-template-engine - Medium ()")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=AY99ODBchIA&list=PLVvjrrRCBy2JbOPP2JXfCtADABI1QHzWg"}),"dcode - Pug (Jade) Tutorial #1 - Getting Started | HTML + NodeJS - Youtube")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://webapplog.com/jade"}),"jade")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://codepen.io/mimoduo/post/learn-pug-js-with-pugs"}),"Learn pug.js with pugs")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://codepen.io/mimoduo/post/pug-js-cheat-sheet"}),"Pug.js - Cheat sheet")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://gist.github.com/joepie91/c0069ab0e0da40cc7b54b8c2203befe1"}),"Express server side rendering")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://gittobook.org/books/185/practicalnode"}),"Practical Node - online book")," (look at the PUG sections over the index)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=-3vvxn78MH4&t=1s"}),"Youtube - Node.js / Express / MongoDB - Build a Shopping Cart")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.youtube.com/watch?v=gYjHDMPrkWU&list=PLpPnRKq7eNW3Qm2OfoJ3Hyvf-36TulLDp"}),"Youtube - Node Authentication Tutorial | Creating a User Based App from Scratch"))))}s.isMDXComponent=!0},469:function(e,t,a){"use strict";a.d(t,"a",(function(){return o})),a.d(t,"b",(function(){return j}));var n=a(0),r=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),s=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):p({},t,{},e)),a},o=function(e){var t=s(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),o=s(a),u=n,j=o["".concat(i,".").concat(u)]||o[u]||m[u]||l;return a?r.a.createElement(j,p({ref:t},c,{components:a})):r.a.createElement(j,p({ref:t},c))}));function j(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=u;var p={};for(var b in t)hasOwnProperty.call(t,b)&&(p[b]=t[b]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var c=2;c<l;c++)i[c]=a[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);